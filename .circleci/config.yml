version: 2.1

executors:
  cpp-python-executor:
    machine:
      image: ubuntu-2004:current
    working_directory: ~/pybindings

jobs:
  build-and-test:
    executor: cpp-python-executor
    steps:
      - checkout

      - restore_cache:
          keys:
            - vcpkg-v6-{{ checksum "vcpkg.json" }}-{{ arch }}
            - vcpkg-v6-{{ checksum "vcpkg.json" }}
            - vcpkg-v6-

      - run:
          name: Install System Dependencies
          command: |
            sudo apt-get update
            # Add deadsnakes PPA for Python 3.12
            sudo apt-get install -y software-properties-common
            sudo add-apt-repository ppa:deadsnakes/ppa -y
            sudo apt-get update
            DEBIAN_FRONTEND=noninteractive sudo apt-get install -y \
              cmake clang clang-tidy clang-format ninja-build pkg-config llvm \
              python3.12 python3.12-dev python3.12-venv \
              autoconf automake libtool curl

      - run:
          name: Install uv
          command: |
            curl -LsSf https://astral.sh/uv/install.sh | sh
            echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> $BASH_ENV

      - run:
          name: Setup vcpkg
          command: |
            git submodule update --init --recursive

      - run:
          name: Bootstrap vcpkg
          command: ./vcpkg/bootstrap-vcpkg.sh

      - run:
          name: Install vcpkg Dependencies  
          command: |
            # Use vcpkg's official pre-built binaries (much faster!)
            ./vcpkg/vcpkg install --triplet=x64-linux --binarysource=default

      - run:
          name: Configure C++ Project
          command: |
            cmake -B build -S . \
              -DCMAKE_TOOLCHAIN_FILE=./vcpkg/scripts/buildsystems/vcpkg.cmake \
              -DCMAKE_CXX_COMPILER=clang++ \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
              -G Ninja

      - run:
          name: Code Formatting Check
          command: |
            echo "Checking code formatting with clang-format..."
            find . -name '*.cpp' -o -name '*.hpp' -o -name '*.h' | \
            grep -E '^\./(src|main\.cpp)' | \
            xargs clang-format --dry-run -Werror || (echo "Code formatting issues found. Run 'clang-format -i' on the files." && exit 1)

      - run:
          name: Build C++ Project
          command: |
            mkdir -p build/test_results
            cmake --build build

      - run:
          name: Static Analysis with Clang-Tidy
          command: |
            echo "Running clang-tidy static analysis..."
            find src -name '*.cpp' -o -name '*.hpp' | \
            xargs clang-tidy -p build \
            --header-filter='src/.*' \
            --warnings-as-errors='-*,performance-*,bugprone-*' \
            || echo "Clang-tidy found issues but continuing..."

      - run:
          name: Run C++ Tests
          command: |
            cd build
            ctest --output-on-failure | tee test_results/ctest_output.log

      - run:
          name: Install Python Package
          command: |
            source $HOME/.cargo/env
            cd ab_py_calculator
            uv pip install -e ".[dev]" --python python3.12

      - run:
          name: Run Python Tests
          command: |
            source $HOME/.cargo/env
            cd ab_py_calculator
            uv run --python python3.12 pytest tests/ -v --junitxml=../build/test_results/pytest.xml

      - run:
          name: Python Code Quality
          command: |
            source $HOME/.cargo/env
            cd ab_py_calculator
            uv run --python python3.12 ruff check .
            uv run --python python3.12 mypy .

      - store_test_results:
          path: build/test_results

      - store_artifacts:
          path: build/test_results
          destination: test-results

      - save_cache:
          key: vcpkg-v6-{{ checksum "vcpkg.json" }}-{{ arch }}
          paths:
            - ./vcpkg/installed

workflows:
  version: 2
  build-test-analyze:
    jobs:
      - build-and-test